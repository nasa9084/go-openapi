package generator_test

import (
	"bytes"
	"io/ioutil"
	"log"
	"os"
	"testing"

	"github.com/nasa9084/go-openapi/internal/generator"
)

func setup(t *testing.T) (f *bytes.Buffer, teardown func()) {
	t.Helper()
	log.SetOutput(ioutil.Discard)

	buf := new(bytes.Buffer)
	generator.WriteFile = func(_ string, data []byte, _ os.FileMode) error {
		_, err := buf.Write(data)
		return err
	}
	return buf, func() {
		generator.WriteFile = ioutil.WriteFile
		log.SetOutput(os.Stdout)
	}
}

func TestGenerator(t *testing.T) {
	buf, teardown := setup(t)
	defer teardown()

	g := generator.New("myGenerator")
	g.Import("", "fmt")
	g.Printf("\nfunc main() {")
	g.Printf("\nfmt.Print(\"hello, world\")")
	g.Import("openapi", "github.com/nasa9084/go-openapi")
	g.Printf("\n}")

	if err := g.Save(""); err != nil {
		t.Fatal(err)
	}

	want := `// Code generated by myGenerator. DO NOT EDIT.

package openapi

import (
	"fmt"

	openapi "github.com/nasa9084/go-openapi"
)

func main() {
	fmt.Print("hello, world")
}
`
	if buf.String() != want {
		t.Errorf("unexpected:\n  got:\n%s\n  want:\n%s", buf.String(), want)
		return
	}
}

func TestNoImports(t *testing.T) {
	buf, teardown := setup(t)
	defer teardown()

	g := generator.New("myGenerator")
	g.Printf("\nfunc main() {")
	g.Printf("\nprint(\"foo\")")
	g.Printf("\n}")
	if err := g.Save(""); err != nil {
		t.Fatal(err)
	}
	want := `// Code generated by myGenerator. DO NOT EDIT.

package openapi

func main() {
	print("foo")
}
`
	if buf.String() != want {
		t.Errorf("unexpected:\n  got:\n%s\n  want:\n%s", buf.String(), want)
		return
	}
}

func TestGeneratorFormatError(t *testing.T) {
	_, teardown := setup(t)
	defer teardown()

	g := generator.New("myGenerator")
	g.Printf("\npackage foo")

	if err := g.Save(""); err == nil {
		t.Errorf("error is expected but nil")
		return
	}
}
