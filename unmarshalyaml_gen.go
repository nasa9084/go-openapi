// Code generated by mkunmarshalyaml.go. DO NOT EDIT.

package openapi

import (
	"errors"
	"net/url"
	"regexp"
	"strings"
)

func (v *OpenAPI) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	openapiUnmarshal, ok := proxy["openapi"]
	if !ok {
		return ErrRequired("openapi")
	}
	var openapiVal string
	if err := openapiUnmarshal.unmarshal(&openapiVal); err != nil {
		return err
	}
	v.openapi = strings.TrimSuffix(openapiVal, "\n")
	delete(proxy, `openapi`)

	if !isValidSemVer(v.openapi) {
		return errors.New(`"openapi" field must be a valid semantic version but not`)
	}

	infoUnmarshal, ok := proxy["info"]
	if !ok {
		return ErrRequired("info")
	}
	var infoVal Info
	if err := infoUnmarshal.unmarshal(&infoVal); err != nil {
		return err
	}
	v.info = &infoVal
	delete(proxy, `info`)

	if serversUnmarshal, ok := proxy["servers"]; ok {
		var serversVal []*Server
		if err := serversUnmarshal.unmarshal(&serversVal); err != nil {
			return err
		}
		v.servers = serversVal
		delete(proxy, `servers`)
	}

	pathsUnmarshal, ok := proxy["paths"]
	if !ok {
		return ErrRequired("paths")
	}
	var pathsVal Paths
	if err := pathsUnmarshal.unmarshal(&pathsVal); err != nil {
		return err
	}
	v.paths = &pathsVal
	delete(proxy, `paths`)

	if componentsUnmarshal, ok := proxy["components"]; ok {
		var componentsVal Components
		if err := componentsUnmarshal.unmarshal(&componentsVal); err != nil {
			return err
		}
		v.components = &componentsVal
		delete(proxy, `components`)
	}

	if securityUnmarshal, ok := proxy["security"]; ok {
		var securityVal []*SecurityRequirement
		if err := securityUnmarshal.unmarshal(&securityVal); err != nil {
			return err
		}
		v.security = securityVal
		delete(proxy, `security`)
	}

	if tagsUnmarshal, ok := proxy["tags"]; ok {
		var tagsVal []*Tag
		if err := tagsUnmarshal.unmarshal(&tagsVal); err != nil {
			return err
		}
		v.tags = tagsVal
		delete(proxy, `tags`)
	}

	if externalDocsUnmarshal, ok := proxy["externalDocs"]; ok {
		var externalDocsVal ExternalDocumentation
		if err := externalDocsUnmarshal.unmarshal(&externalDocsVal); err != nil {
			return err
		}
		v.externalDocs = &externalDocsVal
		delete(proxy, `externalDocs`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	v.setRoot(v)
	return nil
}

func (v *Info) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	titleUnmarshal, ok := proxy["title"]
	if !ok {
		return ErrRequired("title")
	}
	var titleVal string
	if err := titleUnmarshal.unmarshal(&titleVal); err != nil {
		return err
	}
	v.title = strings.TrimSuffix(titleVal, "\n")
	delete(proxy, `title`)

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if termsOfServiceUnmarshal, ok := proxy["termsOfService"]; ok {
		var termsOfServiceVal string
		if err := termsOfServiceUnmarshal.unmarshal(&termsOfServiceVal); err != nil {
			return err
		}
		v.termsOfService = strings.TrimSuffix(termsOfServiceVal, "\n")
		delete(proxy, `termsOfService`)
	}

	if v.termsOfService != "" {
		if _, err := url.ParseRequestURI(v.termsOfService); err != nil {
			return err
		}
	}

	if contactUnmarshal, ok := proxy["contact"]; ok {
		var contactVal Contact
		if err := contactUnmarshal.unmarshal(&contactVal); err != nil {
			return err
		}
		v.contact = &contactVal
		delete(proxy, `contact`)
	}

	if licenseUnmarshal, ok := proxy["license"]; ok {
		var licenseVal License
		if err := licenseUnmarshal.unmarshal(&licenseVal); err != nil {
			return err
		}
		v.license = &licenseVal
		delete(proxy, `license`)
	}

	versionUnmarshal, ok := proxy["version"]
	if !ok {
		return ErrRequired("version")
	}
	var versionVal string
	if err := versionUnmarshal.unmarshal(&versionVal); err != nil {
		return err
	}
	v.version = strings.TrimSuffix(versionVal, "\n")
	delete(proxy, `version`)
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Contact) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if nameUnmarshal, ok := proxy["name"]; ok {
		var nameVal string
		if err := nameUnmarshal.unmarshal(&nameVal); err != nil {
			return err
		}
		v.name = strings.TrimSuffix(nameVal, "\n")
		delete(proxy, `name`)
	}

	if urlUnmarshal, ok := proxy["url"]; ok {
		var urlVal string
		if err := urlUnmarshal.unmarshal(&urlVal); err != nil {
			return err
		}
		v.url = strings.TrimSuffix(urlVal, "\n")
		delete(proxy, `url`)
	}

	if v.url != "" {
		if _, err := url.ParseRequestURI(v.url); err != nil {
			return err
		}
	}

	if emailUnmarshal, ok := proxy["email"]; ok {
		var emailVal string
		if err := emailUnmarshal.unmarshal(&emailVal); err != nil {
			return err
		}
		v.email = strings.TrimSuffix(emailVal, "\n")
		delete(proxy, `email`)
	}

	if v.email != "" {
		if v.email != "" && !emailRegexp.MatchString(v.email) {
			return errors.New(`"email" field must be an email address`)
		}
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *License) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	nameUnmarshal, ok := proxy["name"]
	if !ok {
		return ErrRequired("name")
	}
	var nameVal string
	if err := nameUnmarshal.unmarshal(&nameVal); err != nil {
		return err
	}
	v.name = strings.TrimSuffix(nameVal, "\n")
	delete(proxy, `name`)

	if urlUnmarshal, ok := proxy["url"]; ok {
		var urlVal string
		if err := urlUnmarshal.unmarshal(&urlVal); err != nil {
			return err
		}
		v.url = strings.TrimSuffix(urlVal, "\n")
		delete(proxy, `url`)
	}

	if v.url != "" {
		if _, err := url.ParseRequestURI(v.url); err != nil {
			return err
		}
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Server) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	urlUnmarshal, ok := proxy["url"]
	if !ok {
		return ErrRequired("url")
	}
	var urlVal string
	if err := urlUnmarshal.unmarshal(&urlVal); err != nil {
		return err
	}
	v.url = strings.TrimSuffix(urlVal, "\n")
	delete(proxy, `url`)

	if err := validateURLTemplate(v.url); err != nil {
		return err
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if variablesUnmarshal, ok := proxy["variables"]; ok {
		var variablesVal map[string]*ServerVariable
		if err := variablesUnmarshal.unmarshal(&variablesVal); err != nil {
			return err
		}
		v.variables = variablesVal
		delete(proxy, `variables`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *ServerVariable) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if enumUnmarshal, ok := proxy["enum"]; ok {
		var enumVal []string
		if err := enumUnmarshal.unmarshal(&enumVal); err != nil {
			return err
		}
		v.enum = enumVal
		delete(proxy, `enum`)
	}

	default_Unmarshal, ok := proxy["default"]
	if !ok {
		return ErrRequired("default")
	}
	var default_Val string
	if err := default_Unmarshal.unmarshal(&default_Val); err != nil {
		return err
	}
	v.default_ = strings.TrimSuffix(default_Val, "\n")
	delete(proxy, `default`)

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Components) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if schemasUnmarshal, ok := proxy["schemas"]; ok {
		var schemasVal map[string]*Schema
		if err := schemasUnmarshal.unmarshal(&schemasVal); err != nil {
			return err
		}
		v.schemas = schemasVal
		delete(proxy, `schemas`)
	}

	if responsesUnmarshal, ok := proxy["responses"]; ok {
		var responsesVal map[string]*Response
		if err := responsesUnmarshal.unmarshal(&responsesVal); err != nil {
			return err
		}
		v.responses = responsesVal
		delete(proxy, `responses`)
	}

	if parametersUnmarshal, ok := proxy["parameters"]; ok {
		var parametersVal map[string]*Parameter
		if err := parametersUnmarshal.unmarshal(&parametersVal); err != nil {
			return err
		}
		v.parameters = parametersVal
		delete(proxy, `parameters`)
	}

	if examplesUnmarshal, ok := proxy["examples"]; ok {
		var examplesVal map[string]*Example
		if err := examplesUnmarshal.unmarshal(&examplesVal); err != nil {
			return err
		}
		v.examples = examplesVal
		delete(proxy, `examples`)
	}

	if requestBodiesUnmarshal, ok := proxy["requestBodies"]; ok {
		var requestBodiesVal map[string]*RequestBody
		if err := requestBodiesUnmarshal.unmarshal(&requestBodiesVal); err != nil {
			return err
		}
		v.requestBodies = requestBodiesVal
		delete(proxy, `requestBodies`)
	}

	if headersUnmarshal, ok := proxy["headers"]; ok {
		var headersVal map[string]*Header
		if err := headersUnmarshal.unmarshal(&headersVal); err != nil {
			return err
		}
		v.headers = headersVal
		delete(proxy, `headers`)
	}

	if securitySchemesUnmarshal, ok := proxy["securitySchemes"]; ok {
		var securitySchemesVal map[string]*SecurityScheme
		if err := securitySchemesUnmarshal.unmarshal(&securitySchemesVal); err != nil {
			return err
		}
		v.securitySchemes = securitySchemesVal
		delete(proxy, `securitySchemes`)
	}

	if linksUnmarshal, ok := proxy["links"]; ok {
		var linksVal map[string]*Link
		if err := linksUnmarshal.unmarshal(&linksVal); err != nil {
			return err
		}
		v.links = linksVal
		delete(proxy, `links`)
	}

	if callbacksUnmarshal, ok := proxy["callbacks"]; ok {
		var callbacksVal map[string]*Callback
		if err := callbacksUnmarshal.unmarshal(&callbacksVal); err != nil {
			return err
		}
		v.callbacks = callbacksVal
		delete(proxy, `callbacks`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Paths) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	paths := map[string]*PathItem{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "/") {
			continue
		}
		var pathsv PathItem
		if err := val.unmarshal(&pathsv); err != nil {
			return err
		}
		paths[key] = &pathsv
		delete(proxy, key)
	}
	if len(paths) != 0 {
		v.paths = paths
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *PathItem) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if summaryUnmarshal, ok := proxy["summary"]; ok {
		var summaryVal string
		if err := summaryUnmarshal.unmarshal(&summaryVal); err != nil {
			return err
		}
		v.summary = strings.TrimSuffix(summaryVal, "\n")
		delete(proxy, `summary`)
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if getUnmarshal, ok := proxy["get"]; ok {
		var getVal Operation
		if err := getUnmarshal.unmarshal(&getVal); err != nil {
			return err
		}
		v.get = &getVal
		delete(proxy, `get`)
	}

	if putUnmarshal, ok := proxy["put"]; ok {
		var putVal Operation
		if err := putUnmarshal.unmarshal(&putVal); err != nil {
			return err
		}
		v.put = &putVal
		delete(proxy, `put`)
	}

	if postUnmarshal, ok := proxy["post"]; ok {
		var postVal Operation
		if err := postUnmarshal.unmarshal(&postVal); err != nil {
			return err
		}
		v.post = &postVal
		delete(proxy, `post`)
	}

	if deleteUnmarshal, ok := proxy["delete"]; ok {
		var deleteVal Operation
		if err := deleteUnmarshal.unmarshal(&deleteVal); err != nil {
			return err
		}
		v.delete = &deleteVal
		delete(proxy, `delete`)
	}

	if optionsUnmarshal, ok := proxy["options"]; ok {
		var optionsVal Operation
		if err := optionsUnmarshal.unmarshal(&optionsVal); err != nil {
			return err
		}
		v.options = &optionsVal
		delete(proxy, `options`)
	}

	if headUnmarshal, ok := proxy["head"]; ok {
		var headVal Operation
		if err := headUnmarshal.unmarshal(&headVal); err != nil {
			return err
		}
		v.head = &headVal
		delete(proxy, `head`)
	}

	if patchUnmarshal, ok := proxy["patch"]; ok {
		var patchVal Operation
		if err := patchUnmarshal.unmarshal(&patchVal); err != nil {
			return err
		}
		v.patch = &patchVal
		delete(proxy, `patch`)
	}

	if traceUnmarshal, ok := proxy["trace"]; ok {
		var traceVal Operation
		if err := traceUnmarshal.unmarshal(&traceVal); err != nil {
			return err
		}
		v.trace = &traceVal
		delete(proxy, `trace`)
	}

	if serversUnmarshal, ok := proxy["servers"]; ok {
		var serversVal []*Server
		if err := serversUnmarshal.unmarshal(&serversVal); err != nil {
			return err
		}
		v.servers = serversVal
		delete(proxy, `servers`)
	}

	if parametersUnmarshal, ok := proxy["parameters"]; ok {
		var parametersVal []*Parameter
		if err := parametersUnmarshal.unmarshal(&parametersVal); err != nil {
			return err
		}
		v.parameters = parametersVal
		delete(proxy, `parameters`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Operation) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if tagsUnmarshal, ok := proxy["tags"]; ok {
		var tagsVal []string
		if err := tagsUnmarshal.unmarshal(&tagsVal); err != nil {
			return err
		}
		v.tags = tagsVal
		delete(proxy, `tags`)
	}

	if summaryUnmarshal, ok := proxy["summary"]; ok {
		var summaryVal string
		if err := summaryUnmarshal.unmarshal(&summaryVal); err != nil {
			return err
		}
		v.summary = strings.TrimSuffix(summaryVal, "\n")
		delete(proxy, `summary`)
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if externalDocsUnmarshal, ok := proxy["externalDocs"]; ok {
		var externalDocsVal ExternalDocumentation
		if err := externalDocsUnmarshal.unmarshal(&externalDocsVal); err != nil {
			return err
		}
		v.externalDocs = &externalDocsVal
		delete(proxy, `externalDocs`)
	}

	if operationIDUnmarshal, ok := proxy["operationId"]; ok {
		var operationIDVal string
		if err := operationIDUnmarshal.unmarshal(&operationIDVal); err != nil {
			return err
		}
		v.operationID = strings.TrimSuffix(operationIDVal, "\n")
		delete(proxy, `operationId`)
	}

	if parametersUnmarshal, ok := proxy["parameters"]; ok {
		var parametersVal []*Parameter
		if err := parametersUnmarshal.unmarshal(&parametersVal); err != nil {
			return err
		}
		v.parameters = parametersVal
		delete(proxy, `parameters`)
	}

	if requestBodyUnmarshal, ok := proxy["requestBody"]; ok {
		var requestBodyVal RequestBody
		if err := requestBodyUnmarshal.unmarshal(&requestBodyVal); err != nil {
			return err
		}
		v.requestBody = &requestBodyVal
		delete(proxy, `requestBody`)
	}

	responsesUnmarshal, ok := proxy["responses"]
	if !ok {
		return ErrRequired("responses")
	}
	var responsesVal Responses
	if err := responsesUnmarshal.unmarshal(&responsesVal); err != nil {
		return err
	}
	v.responses = &responsesVal
	delete(proxy, `responses`)

	if callbacksUnmarshal, ok := proxy["callbacks"]; ok {
		var callbacksVal map[string]*Callback
		if err := callbacksUnmarshal.unmarshal(&callbacksVal); err != nil {
			return err
		}
		v.callbacks = callbacksVal
		delete(proxy, `callbacks`)
	}

	if deprecatedUnmarshal, ok := proxy["deprecated"]; ok {
		var deprecatedVal bool
		if err := deprecatedUnmarshal.unmarshal(&deprecatedVal); err != nil {
			return err
		}
		v.deprecated = deprecatedVal
		delete(proxy, `deprecated`)
	}

	if securityUnmarshal, ok := proxy["security"]; ok {
		var securityVal []*SecurityRequirement
		if err := securityUnmarshal.unmarshal(&securityVal); err != nil {
			return err
		}
		v.security = securityVal
		delete(proxy, `security`)
	}

	if serversUnmarshal, ok := proxy["servers"]; ok {
		var serversVal []*Server
		if err := serversUnmarshal.unmarshal(&serversVal); err != nil {
			return err
		}
		v.servers = serversVal
		delete(proxy, `servers`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *ExternalDocumentation) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	urlUnmarshal, ok := proxy["url"]
	if !ok {
		return ErrRequired("url")
	}
	var urlVal string
	if err := urlUnmarshal.unmarshal(&urlVal); err != nil {
		return err
	}
	v.url = strings.TrimSuffix(urlVal, "\n")
	delete(proxy, `url`)

	if _, err := url.ParseRequestURI(v.url); err != nil {
		return err
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Parameter) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	nameUnmarshal, ok := proxy["name"]
	if !ok {
		return ErrRequired("name")
	}
	var nameVal string
	if err := nameUnmarshal.unmarshal(&nameVal); err != nil {
		return err
	}
	v.name = strings.TrimSuffix(nameVal, "\n")
	delete(proxy, `name`)

	inUnmarshal, ok := proxy["in"]
	if !ok {
		return ErrRequired("in")
	}
	var inVal string
	if err := inUnmarshal.unmarshal(&inVal); err != nil {
		return err
	}
	v.in = strings.TrimSuffix(inVal, "\n")
	delete(proxy, `in`)

	if !isOneOf(v.in, []string{"query", "header", "path", "cookie"}) {
		return errors.New(`"in" field must be one of ["query", "header", "path", "cookie"]`)
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if requiredUnmarshal, ok := proxy["required"]; ok {
		var requiredVal bool
		if err := requiredUnmarshal.unmarshal(&requiredVal); err != nil {
			return err
		}
		v.required = requiredVal
		delete(proxy, `required`)
	}

	if deprecatedUnmarshal, ok := proxy["deprecated"]; ok {
		var deprecatedVal bool
		if err := deprecatedUnmarshal.unmarshal(&deprecatedVal); err != nil {
			return err
		}
		v.deprecated = deprecatedVal
		delete(proxy, `deprecated`)
	}

	if allowEmptyValueUnmarshal, ok := proxy["allowEmptyValue"]; ok {
		var allowEmptyValueVal bool
		if err := allowEmptyValueUnmarshal.unmarshal(&allowEmptyValueVal); err != nil {
			return err
		}
		v.allowEmptyValue = allowEmptyValueVal
		delete(proxy, `allowEmptyValue`)
	}

	if styleUnmarshal, ok := proxy["style"]; ok {
		var styleVal string
		if err := styleUnmarshal.unmarshal(&styleVal); err != nil {
			return err
		}
		v.style = strings.TrimSuffix(styleVal, "\n")
		delete(proxy, `style`)
	}

	if explodeUnmarshal, ok := proxy["explode"]; ok {
		var explodeVal bool
		if err := explodeUnmarshal.unmarshal(&explodeVal); err != nil {
			return err
		}
		v.explode = explodeVal
		delete(proxy, `explode`)
	}

	if allowReservedUnmarshal, ok := proxy["allowReserved"]; ok {
		var allowReservedVal bool
		if err := allowReservedUnmarshal.unmarshal(&allowReservedVal); err != nil {
			return err
		}
		v.allowReserved = allowReservedVal
		delete(proxy, `allowReserved`)
	}

	if schemaUnmarshal, ok := proxy["schema"]; ok {
		var schemaVal Schema
		if err := schemaUnmarshal.unmarshal(&schemaVal); err != nil {
			return err
		}
		v.schema = &schemaVal
		delete(proxy, `schema`)
	}

	if exampleUnmarshal, ok := proxy["example"]; ok {
		var exampleVal interface{}
		if err := exampleUnmarshal.unmarshal(&exampleVal); err != nil {
			return err
		}
		v.example = exampleVal
		delete(proxy, `example`)
	}

	if examplesUnmarshal, ok := proxy["examples"]; ok {
		var examplesVal map[string]*Example
		if err := examplesUnmarshal.unmarshal(&examplesVal); err != nil {
			return err
		}
		v.examples = examplesVal
		delete(proxy, `examples`)
	}

	if contentUnmarshal, ok := proxy["content"]; ok {
		var contentVal map[string]*MediaType
		if err := contentUnmarshal.unmarshal(&contentVal); err != nil {
			return err
		}
		v.content = contentVal
		delete(proxy, `content`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *RequestBody) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	contentUnmarshal, ok := proxy["content"]
	if !ok {
		return ErrRequired("content")
	}
	var contentVal map[string]*MediaType
	if err := contentUnmarshal.unmarshal(&contentVal); err != nil {
		return err
	}
	v.content = contentVal
	delete(proxy, `content`)

	if requiredUnmarshal, ok := proxy["required"]; ok {
		var requiredVal bool
		if err := requiredUnmarshal.unmarshal(&requiredVal); err != nil {
			return err
		}
		v.required = requiredVal
		delete(proxy, `required`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *MediaType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if schemaUnmarshal, ok := proxy["schema"]; ok {
		var schemaVal Schema
		if err := schemaUnmarshal.unmarshal(&schemaVal); err != nil {
			return err
		}
		v.schema = &schemaVal
		delete(proxy, `schema`)
	}

	if exampleUnmarshal, ok := proxy["example"]; ok {
		var exampleVal interface{}
		if err := exampleUnmarshal.unmarshal(&exampleVal); err != nil {
			return err
		}
		v.example = exampleVal
		delete(proxy, `example`)
	}

	if examplesUnmarshal, ok := proxy["examples"]; ok {
		var examplesVal map[string]*Example
		if err := examplesUnmarshal.unmarshal(&examplesVal); err != nil {
			return err
		}
		v.examples = examplesVal
		delete(proxy, `examples`)
	}

	if encodingUnmarshal, ok := proxy["encoding"]; ok {
		var encodingVal map[string]*Encoding
		if err := encodingUnmarshal.unmarshal(&encodingVal); err != nil {
			return err
		}
		v.encoding = encodingVal
		delete(proxy, `encoding`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Encoding) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if contentTypeUnmarshal, ok := proxy["contentType"]; ok {
		var contentTypeVal string
		if err := contentTypeUnmarshal.unmarshal(&contentTypeVal); err != nil {
			return err
		}
		v.contentType = strings.TrimSuffix(contentTypeVal, "\n")
		delete(proxy, `contentType`)
	}

	if headersUnmarshal, ok := proxy["headers"]; ok {
		var headersVal map[string]*Header
		if err := headersUnmarshal.unmarshal(&headersVal); err != nil {
			return err
		}
		v.headers = headersVal
		delete(proxy, `headers`)
	}

	if styleUnmarshal, ok := proxy["style"]; ok {
		var styleVal string
		if err := styleUnmarshal.unmarshal(&styleVal); err != nil {
			return err
		}
		v.style = strings.TrimSuffix(styleVal, "\n")
		delete(proxy, `style`)
	}

	if explodeUnmarshal, ok := proxy["explode"]; ok {
		var explodeVal bool
		if err := explodeUnmarshal.unmarshal(&explodeVal); err != nil {
			return err
		}
		v.explode = explodeVal
		delete(proxy, `explode`)
	}

	if allowReservedUnmarshal, ok := proxy["allowReserved"]; ok {
		var allowReservedVal bool
		if err := allowReservedUnmarshal.unmarshal(&allowReservedVal); err != nil {
			return err
		}
		v.allowReserved = allowReservedVal
		delete(proxy, `allowReserved`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Responses) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	responses := map[string]*Response{}
	for key, val := range proxy {
		responsesRegexp := regexp.MustCompile(`^[1-5]([0-9][0-9]|XX)|default$`)
		if !responsesRegexp.MatchString(key) {
			continue
		}
		var responsesv Response
		if err := val.unmarshal(&responsesv); err != nil {
			return err
		}
		responses[key] = &responsesv
		delete(proxy, key)
	}
	if len(responses) != 0 {
		v.responses = responses
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Response) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	descriptionUnmarshal, ok := proxy["description"]
	if !ok {
		return ErrRequired("description")
	}
	var descriptionVal string
	if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
		return err
	}
	v.description = strings.TrimSuffix(descriptionVal, "\n")
	delete(proxy, `description`)

	if headersUnmarshal, ok := proxy["headers"]; ok {
		var headersVal map[string]*Header
		if err := headersUnmarshal.unmarshal(&headersVal); err != nil {
			return err
		}
		v.headers = headersVal
		delete(proxy, `headers`)
	}

	if contentUnmarshal, ok := proxy["content"]; ok {
		var contentVal map[string]*MediaType
		if err := contentUnmarshal.unmarshal(&contentVal); err != nil {
			return err
		}
		v.content = contentVal
		delete(proxy, `content`)
	}

	if linksUnmarshal, ok := proxy["links"]; ok {
		var linksVal map[string]*Link
		if err := linksUnmarshal.unmarshal(&linksVal); err != nil {
			return err
		}
		v.links = linksVal
		delete(proxy, `links`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Callback) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}
	callback := map[string]*PathItem{}
	for key, val := range proxy {
		if !IsRuntimeExpr(key) {
			continue
		}
		var callbackv PathItem
		if err := val.unmarshal(&callbackv); err != nil {
			return err
		}
		callback[key] = &callbackv
		delete(proxy, key)
	}
	if len(callback) != 0 {
		v.callback = callback
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Example) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	if summaryUnmarshal, ok := proxy["summary"]; ok {
		var summaryVal string
		if err := summaryUnmarshal.unmarshal(&summaryVal); err != nil {
			return err
		}
		v.summary = strings.TrimSuffix(summaryVal, "\n")
		delete(proxy, `summary`)
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if valueUnmarshal, ok := proxy["value"]; ok {
		var valueVal interface{}
		if err := valueUnmarshal.unmarshal(&valueVal); err != nil {
			return err
		}
		v.value = valueVal
		delete(proxy, `value`)
	}

	if externalValueUnmarshal, ok := proxy["externalValue"]; ok {
		var externalValueVal string
		if err := externalValueUnmarshal.unmarshal(&externalValueVal); err != nil {
			return err
		}
		v.externalValue = strings.TrimSuffix(externalValueVal, "\n")
		delete(proxy, `externalValue`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Link) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	if operationRefUnmarshal, ok := proxy["operationRef"]; ok {
		var operationRefVal string
		if err := operationRefUnmarshal.unmarshal(&operationRefVal); err != nil {
			return err
		}
		v.operationRef = strings.TrimSuffix(operationRefVal, "\n")
		delete(proxy, `operationRef`)
	}

	if operationIDUnmarshal, ok := proxy["operationId"]; ok {
		var operationIDVal string
		if err := operationIDUnmarshal.unmarshal(&operationIDVal); err != nil {
			return err
		}
		v.operationID = strings.TrimSuffix(operationIDVal, "\n")
		delete(proxy, `operationId`)
	}

	if parametersUnmarshal, ok := proxy["parameters"]; ok {
		var parametersVal map[string]interface{}
		if err := parametersUnmarshal.unmarshal(&parametersVal); err != nil {
			return err
		}
		v.parameters = parametersVal
		delete(proxy, `parameters`)
	}

	if requestBodyUnmarshal, ok := proxy["requestBody"]; ok {
		var requestBodyVal interface{}
		if err := requestBodyUnmarshal.unmarshal(&requestBodyVal); err != nil {
			return err
		}
		v.requestBody = requestBodyVal
		delete(proxy, `requestBody`)
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if serverUnmarshal, ok := proxy["server"]; ok {
		var serverVal Server
		if err := serverUnmarshal.unmarshal(&serverVal); err != nil {
			return err
		}
		v.server = &serverVal
		delete(proxy, `server`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Header) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if requiredUnmarshal, ok := proxy["required"]; ok {
		var requiredVal bool
		if err := requiredUnmarshal.unmarshal(&requiredVal); err != nil {
			return err
		}
		v.required = requiredVal
		delete(proxy, `required`)
	}

	if deprecatedUnmarshal, ok := proxy["deprecated"]; ok {
		var deprecatedVal bool
		if err := deprecatedUnmarshal.unmarshal(&deprecatedVal); err != nil {
			return err
		}
		v.deprecated = deprecatedVal
		delete(proxy, `deprecated`)
	}

	if allowEmptyValueUnmarshal, ok := proxy["allowEmptyValue"]; ok {
		var allowEmptyValueVal bool
		if err := allowEmptyValueUnmarshal.unmarshal(&allowEmptyValueVal); err != nil {
			return err
		}
		v.allowEmptyValue = allowEmptyValueVal
		delete(proxy, `allowEmptyValue`)
	}

	if styleUnmarshal, ok := proxy["style"]; ok {
		var styleVal string
		if err := styleUnmarshal.unmarshal(&styleVal); err != nil {
			return err
		}
		v.style = strings.TrimSuffix(styleVal, "\n")
		delete(proxy, `style`)
	}

	if explodeUnmarshal, ok := proxy["explode"]; ok {
		var explodeVal bool
		if err := explodeUnmarshal.unmarshal(&explodeVal); err != nil {
			return err
		}
		v.explode = explodeVal
		delete(proxy, `explode`)
	}

	if allowReservedUnmarshal, ok := proxy["allowReserved"]; ok {
		var allowReservedVal bool
		if err := allowReservedUnmarshal.unmarshal(&allowReservedVal); err != nil {
			return err
		}
		v.allowReserved = allowReservedVal
		delete(proxy, `allowReserved`)
	}

	if schemaUnmarshal, ok := proxy["schema"]; ok {
		var schemaVal Schema
		if err := schemaUnmarshal.unmarshal(&schemaVal); err != nil {
			return err
		}
		v.schema = &schemaVal
		delete(proxy, `schema`)
	}

	if exampleUnmarshal, ok := proxy["example"]; ok {
		var exampleVal interface{}
		if err := exampleUnmarshal.unmarshal(&exampleVal); err != nil {
			return err
		}
		v.example = exampleVal
		delete(proxy, `example`)
	}

	if examplesUnmarshal, ok := proxy["examples"]; ok {
		var examplesVal map[string]*Example
		if err := examplesUnmarshal.unmarshal(&examplesVal); err != nil {
			return err
		}
		v.examples = examplesVal
		delete(proxy, `examples`)
	}

	if contentUnmarshal, ok := proxy["content"]; ok {
		var contentVal map[string]*MediaType
		if err := contentUnmarshal.unmarshal(&contentVal); err != nil {
			return err
		}
		v.content = contentVal
		delete(proxy, `content`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Tag) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	nameUnmarshal, ok := proxy["name"]
	if !ok {
		return ErrRequired("name")
	}
	var nameVal string
	if err := nameUnmarshal.unmarshal(&nameVal); err != nil {
		return err
	}
	v.name = strings.TrimSuffix(nameVal, "\n")
	delete(proxy, `name`)

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if externalDocsUnmarshal, ok := proxy["externalDocs"]; ok {
		var externalDocsVal ExternalDocumentation
		if err := externalDocsUnmarshal.unmarshal(&externalDocsVal); err != nil {
			return err
		}
		v.externalDocs = &externalDocsVal
		delete(proxy, `externalDocs`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Schema) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	if titleUnmarshal, ok := proxy["title"]; ok {
		var titleVal string
		if err := titleUnmarshal.unmarshal(&titleVal); err != nil {
			return err
		}
		v.title = strings.TrimSuffix(titleVal, "\n")
		delete(proxy, `title`)
	}

	if multipleOfUnmarshal, ok := proxy["multipleOf"]; ok {
		var multipleOfVal int
		if err := multipleOfUnmarshal.unmarshal(&multipleOfVal); err != nil {
			return err
		}
		v.multipleOf = multipleOfVal
		delete(proxy, `multipleOf`)
	}

	if maximumUnmarshal, ok := proxy["maximum"]; ok {
		var maximumVal int
		if err := maximumUnmarshal.unmarshal(&maximumVal); err != nil {
			return err
		}
		v.maximum = maximumVal
		delete(proxy, `maximum`)
	}

	if exclusiveMaximumUnmarshal, ok := proxy["exclusiveMaximum"]; ok {
		var exclusiveMaximumVal bool
		if err := exclusiveMaximumUnmarshal.unmarshal(&exclusiveMaximumVal); err != nil {
			return err
		}
		v.exclusiveMaximum = exclusiveMaximumVal
		delete(proxy, `exclusiveMaximum`)
	}

	if minimumUnmarshal, ok := proxy["minimum"]; ok {
		var minimumVal int
		if err := minimumUnmarshal.unmarshal(&minimumVal); err != nil {
			return err
		}
		v.minimum = minimumVal
		delete(proxy, `minimum`)
	}

	if exclusiveMinimumUnmarshal, ok := proxy["exclusiveMinimum"]; ok {
		var exclusiveMinimumVal bool
		if err := exclusiveMinimumUnmarshal.unmarshal(&exclusiveMinimumVal); err != nil {
			return err
		}
		v.exclusiveMinimum = exclusiveMinimumVal
		delete(proxy, `exclusiveMinimum`)
	}

	if maxLengthUnmarshal, ok := proxy["maxLength"]; ok {
		var maxLengthVal int
		if err := maxLengthUnmarshal.unmarshal(&maxLengthVal); err != nil {
			return err
		}
		v.maxLength = maxLengthVal
		delete(proxy, `maxLength`)
	}

	if minLengthUnmarshal, ok := proxy["minLength"]; ok {
		var minLengthVal int
		if err := minLengthUnmarshal.unmarshal(&minLengthVal); err != nil {
			return err
		}
		v.minLength = minLengthVal
		delete(proxy, `minLength`)
	}

	if patternUnmarshal, ok := proxy["pattern"]; ok {
		var patternVal string
		if err := patternUnmarshal.unmarshal(&patternVal); err != nil {
			return err
		}
		v.pattern = strings.TrimSuffix(patternVal, "\n")
		delete(proxy, `pattern`)
	}

	if maxItemsUnmarshal, ok := proxy["maxItems"]; ok {
		var maxItemsVal int
		if err := maxItemsUnmarshal.unmarshal(&maxItemsVal); err != nil {
			return err
		}
		v.maxItems = maxItemsVal
		delete(proxy, `maxItems`)
	}

	if minItemsUnmarshal, ok := proxy["minItems"]; ok {
		var minItemsVal int
		if err := minItemsUnmarshal.unmarshal(&minItemsVal); err != nil {
			return err
		}
		v.minItems = minItemsVal
		delete(proxy, `minItems`)
	}

	if maxPropertiesUnmarshal, ok := proxy["maxProperties"]; ok {
		var maxPropertiesVal int
		if err := maxPropertiesUnmarshal.unmarshal(&maxPropertiesVal); err != nil {
			return err
		}
		v.maxProperties = maxPropertiesVal
		delete(proxy, `maxProperties`)
	}

	if minPropertiesUnmarshal, ok := proxy["minProperties"]; ok {
		var minPropertiesVal int
		if err := minPropertiesUnmarshal.unmarshal(&minPropertiesVal); err != nil {
			return err
		}
		v.minProperties = minPropertiesVal
		delete(proxy, `minProperties`)
	}

	if requiredUnmarshal, ok := proxy["required"]; ok {
		var requiredVal []string
		if err := requiredUnmarshal.unmarshal(&requiredVal); err != nil {
			return err
		}
		v.required = requiredVal
		delete(proxy, `required`)
	}

	if enumUnmarshal, ok := proxy["enum"]; ok {
		var enumVal []string
		if err := enumUnmarshal.unmarshal(&enumVal); err != nil {
			return err
		}
		v.enum = enumVal
		delete(proxy, `enum`)
	}

	if type_Unmarshal, ok := proxy["type"]; ok {
		var type_Val string
		if err := type_Unmarshal.unmarshal(&type_Val); err != nil {
			return err
		}
		v.type_ = strings.TrimSuffix(type_Val, "\n")
		delete(proxy, `type`)
	}

	if allOfUnmarshal, ok := proxy["allOf"]; ok {
		var allOfVal []*Schema
		if err := allOfUnmarshal.unmarshal(&allOfVal); err != nil {
			return err
		}
		v.allOf = allOfVal
		delete(proxy, `allOf`)
	}

	if oneOfUnmarshal, ok := proxy["oneOf"]; ok {
		var oneOfVal []*Schema
		if err := oneOfUnmarshal.unmarshal(&oneOfVal); err != nil {
			return err
		}
		v.oneOf = oneOfVal
		delete(proxy, `oneOf`)
	}

	if anyOfUnmarshal, ok := proxy["anyOf"]; ok {
		var anyOfVal []*Schema
		if err := anyOfUnmarshal.unmarshal(&anyOfVal); err != nil {
			return err
		}
		v.anyOf = anyOfVal
		delete(proxy, `anyOf`)
	}

	if notUnmarshal, ok := proxy["not"]; ok {
		var notVal Schema
		if err := notUnmarshal.unmarshal(&notVal); err != nil {
			return err
		}
		v.not = &notVal
		delete(proxy, `not`)
	}

	if itemsUnmarshal, ok := proxy["items"]; ok {
		var itemsVal Schema
		if err := itemsUnmarshal.unmarshal(&itemsVal); err != nil {
			return err
		}
		v.items = &itemsVal
		delete(proxy, `items`)
	}

	if propertiesUnmarshal, ok := proxy["properties"]; ok {
		var propertiesVal map[string]*Schema
		if err := propertiesUnmarshal.unmarshal(&propertiesVal); err != nil {
			return err
		}
		v.properties = propertiesVal
		delete(proxy, `properties`)
	}

	if additionalPropertiesUnmarshal, ok := proxy["additionalProperties"]; ok {
		var additionalPropertiesVal Schema
		if err := additionalPropertiesUnmarshal.unmarshal(&additionalPropertiesVal); err != nil {
			return err
		}
		v.additionalProperties = &additionalPropertiesVal
		delete(proxy, `additionalProperties`)
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if formatUnmarshal, ok := proxy["format"]; ok {
		var formatVal string
		if err := formatUnmarshal.unmarshal(&formatVal); err != nil {
			return err
		}
		v.format = strings.TrimSuffix(formatVal, "\n")
		delete(proxy, `format`)
	}

	if default_Unmarshal, ok := proxy["default"]; ok {
		var default_Val string
		if err := default_Unmarshal.unmarshal(&default_Val); err != nil {
			return err
		}
		v.default_ = strings.TrimSuffix(default_Val, "\n")
		delete(proxy, `default`)
	}

	if nullableUnmarshal, ok := proxy["nullable"]; ok {
		var nullableVal bool
		if err := nullableUnmarshal.unmarshal(&nullableVal); err != nil {
			return err
		}
		v.nullable = nullableVal
		delete(proxy, `nullable`)
	}

	if discriminatorUnmarshal, ok := proxy["discriminator"]; ok {
		var discriminatorVal Discriminator
		if err := discriminatorUnmarshal.unmarshal(&discriminatorVal); err != nil {
			return err
		}
		v.discriminator = &discriminatorVal
		delete(proxy, `discriminator`)
	}

	if readOnlyUnmarshal, ok := proxy["readOnly"]; ok {
		var readOnlyVal bool
		if err := readOnlyUnmarshal.unmarshal(&readOnlyVal); err != nil {
			return err
		}
		v.readOnly = readOnlyVal
		delete(proxy, `readOnly`)
	}

	if writeOnlyUnmarshal, ok := proxy["writeOnly"]; ok {
		var writeOnlyVal bool
		if err := writeOnlyUnmarshal.unmarshal(&writeOnlyVal); err != nil {
			return err
		}
		v.writeOnly = writeOnlyVal
		delete(proxy, `writeOnly`)
	}

	if xmlUnmarshal, ok := proxy["xml"]; ok {
		var xmlVal XML
		if err := xmlUnmarshal.unmarshal(&xmlVal); err != nil {
			return err
		}
		v.xml = &xmlVal
		delete(proxy, `xml`)
	}

	if externalDocsUnmarshal, ok := proxy["externalDocs"]; ok {
		var externalDocsVal ExternalDocumentation
		if err := externalDocsUnmarshal.unmarshal(&externalDocsVal); err != nil {
			return err
		}
		v.externalDocs = &externalDocsVal
		delete(proxy, `externalDocs`)
	}

	if exampleUnmarshal, ok := proxy["example"]; ok {
		var exampleVal interface{}
		if err := exampleUnmarshal.unmarshal(&exampleVal); err != nil {
			return err
		}
		v.example = exampleVal
		delete(proxy, `example`)
	}

	if deprecatedUnmarshal, ok := proxy["deprecated"]; ok {
		var deprecatedVal bool
		if err := deprecatedUnmarshal.unmarshal(&deprecatedVal); err != nil {
			return err
		}
		v.deprecated = deprecatedVal
		delete(proxy, `deprecated`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *Discriminator) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if propertyNameUnmarshal, ok := proxy["propertyName"]; ok {
		var propertyNameVal string
		if err := propertyNameUnmarshal.unmarshal(&propertyNameVal); err != nil {
			return err
		}
		v.propertyName = strings.TrimSuffix(propertyNameVal, "\n")
		delete(proxy, `propertyName`)
	}

	if mappingUnmarshal, ok := proxy["mapping"]; ok {
		var mappingVal map[string]string
		if err := mappingUnmarshal.unmarshal(&mappingVal); err != nil {
			return err
		}
		v.mapping = mappingVal
		delete(proxy, `mapping`)
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *XML) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if nameUnmarshal, ok := proxy["name"]; ok {
		var nameVal string
		if err := nameUnmarshal.unmarshal(&nameVal); err != nil {
			return err
		}
		v.name = strings.TrimSuffix(nameVal, "\n")
		delete(proxy, `name`)
	}

	if namespaceUnmarshal, ok := proxy["namespace"]; ok {
		var namespaceVal string
		if err := namespaceUnmarshal.unmarshal(&namespaceVal); err != nil {
			return err
		}
		v.namespace = strings.TrimSuffix(namespaceVal, "\n")
		delete(proxy, `namespace`)
	}

	if prefixUnmarshal, ok := proxy["prefix"]; ok {
		var prefixVal string
		if err := prefixUnmarshal.unmarshal(&prefixVal); err != nil {
			return err
		}
		v.prefix = strings.TrimSuffix(prefixVal, "\n")
		delete(proxy, `prefix`)
	}

	if attributeUnmarshal, ok := proxy["attribute"]; ok {
		var attributeVal bool
		if err := attributeUnmarshal.unmarshal(&attributeVal); err != nil {
			return err
		}
		v.attribute = attributeVal
		delete(proxy, `attribute`)
	}

	if wrappedUnmarshal, ok := proxy["wrapped"]; ok {
		var wrappedVal bool
		if err := wrappedUnmarshal.unmarshal(&wrappedVal); err != nil {
			return err
		}
		v.wrapped = wrappedVal
		delete(proxy, `wrapped`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *SecurityScheme) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	if p, ok := proxy["$ref"]; ok {
		var referenceVal string
		if err := p.unmarshal(&referenceVal); err != nil {
			return err
		}
		v.reference = referenceVal
		delete(proxy, "$ref")
		return nil
	}

	if type_Unmarshal, ok := proxy["type"]; ok {
		var type_Val string
		if err := type_Unmarshal.unmarshal(&type_Val); err != nil {
			return err
		}
		v.type_ = strings.TrimSuffix(type_Val, "\n")
		delete(proxy, `type`)
	}

	if v.type_ != "" {
		if !isOneOf(v.type_, []string{"apiKey", "http", "oauth2", "openIdConnect"}) {
			return errors.New(`"type" field must be one of ["apiKey", "http", "oauth2", "openIdConnect"]`)
		}
	}

	if descriptionUnmarshal, ok := proxy["description"]; ok {
		var descriptionVal string
		if err := descriptionUnmarshal.unmarshal(&descriptionVal); err != nil {
			return err
		}
		v.description = strings.TrimSuffix(descriptionVal, "\n")
		delete(proxy, `description`)
	}

	if nameUnmarshal, ok := proxy["name"]; ok {
		var nameVal string
		if err := nameUnmarshal.unmarshal(&nameVal); err != nil {
			return err
		}
		v.name = strings.TrimSuffix(nameVal, "\n")
		delete(proxy, `name`)
	}

	if inUnmarshal, ok := proxy["in"]; ok {
		var inVal string
		if err := inUnmarshal.unmarshal(&inVal); err != nil {
			return err
		}
		v.in = strings.TrimSuffix(inVal, "\n")
		delete(proxy, `in`)
	}

	if v.in != "" {
		if !isOneOf(v.in, []string{"query", "header", "cookie"}) {
			return errors.New(`"in" field must be one of ["query", "header", "cookie"]`)
		}
	}

	if schemeUnmarshal, ok := proxy["scheme"]; ok {
		var schemeVal string
		if err := schemeUnmarshal.unmarshal(&schemeVal); err != nil {
			return err
		}
		v.scheme = strings.TrimSuffix(schemeVal, "\n")
		delete(proxy, `scheme`)
	}

	if bearerFormatUnmarshal, ok := proxy["bearerFormat"]; ok {
		var bearerFormatVal string
		if err := bearerFormatUnmarshal.unmarshal(&bearerFormatVal); err != nil {
			return err
		}
		v.bearerFormat = strings.TrimSuffix(bearerFormatVal, "\n")
		delete(proxy, `bearerFormat`)
	}

	if flowsUnmarshal, ok := proxy["flows"]; ok {
		var flowsVal OAuthFlows
		if err := flowsUnmarshal.unmarshal(&flowsVal); err != nil {
			return err
		}
		v.flows = &flowsVal
		delete(proxy, `flows`)
	}

	if openIDConnectURLUnmarshal, ok := proxy["openIdConnectUrl"]; ok {
		var openIDConnectURLVal string
		if err := openIDConnectURLUnmarshal.unmarshal(&openIDConnectURLVal); err != nil {
			return err
		}
		v.openIDConnectURL = strings.TrimSuffix(openIDConnectURLVal, "\n")
		delete(proxy, `openIdConnectUrl`)
	}

	if v.openIDConnectURL != "" {
		if _, err := url.ParseRequestURI(v.openIDConnectURL); err != nil {
			return err
		}
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *OAuthFlows) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if implicitUnmarshal, ok := proxy["implicit"]; ok {
		var implicitVal OAuthFlow
		if err := implicitUnmarshal.unmarshal(&implicitVal); err != nil {
			return err
		}
		v.implicit = &implicitVal
		delete(proxy, `implicit`)
	}

	if passwordUnmarshal, ok := proxy["password"]; ok {
		var passwordVal OAuthFlow
		if err := passwordUnmarshal.unmarshal(&passwordVal); err != nil {
			return err
		}
		v.password = &passwordVal
		delete(proxy, `password`)
	}

	if clientCredentialsUnmarshal, ok := proxy["clientCredentials"]; ok {
		var clientCredentialsVal OAuthFlow
		if err := clientCredentialsUnmarshal.unmarshal(&clientCredentialsVal); err != nil {
			return err
		}
		v.clientCredentials = &clientCredentialsVal
		delete(proxy, `clientCredentials`)
	}

	if authorizationCodeUnmarshal, ok := proxy["authorizationCode"]; ok {
		var authorizationCodeVal OAuthFlow
		if err := authorizationCodeUnmarshal.unmarshal(&authorizationCodeVal); err != nil {
			return err
		}
		v.authorizationCode = &authorizationCodeVal
		delete(proxy, `authorizationCode`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *OAuthFlow) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}

	if authorizationURLUnmarshal, ok := proxy["authorizationUrl"]; ok {
		var authorizationURLVal string
		if err := authorizationURLUnmarshal.unmarshal(&authorizationURLVal); err != nil {
			return err
		}
		v.authorizationURL = strings.TrimSuffix(authorizationURLVal, "\n")
		delete(proxy, `authorizationUrl`)
	}

	if v.authorizationURL != "" {
		if _, err := url.ParseRequestURI(v.authorizationURL); err != nil {
			return err
		}
	}

	if tokenURLUnmarshal, ok := proxy["tokenUrl"]; ok {
		var tokenURLVal string
		if err := tokenURLUnmarshal.unmarshal(&tokenURLVal); err != nil {
			return err
		}
		v.tokenURL = strings.TrimSuffix(tokenURLVal, "\n")
		delete(proxy, `tokenUrl`)
	}

	if v.tokenURL != "" {
		if _, err := url.ParseRequestURI(v.tokenURL); err != nil {
			return err
		}
	}

	if refreshURLUnmarshal, ok := proxy["refreshUrl"]; ok {
		var refreshURLVal string
		if err := refreshURLUnmarshal.unmarshal(&refreshURLVal); err != nil {
			return err
		}
		v.refreshURL = strings.TrimSuffix(refreshURLVal, "\n")
		delete(proxy, `refreshUrl`)
	}

	if v.refreshURL != "" {
		if _, err := url.ParseRequestURI(v.refreshURL); err != nil {
			return err
		}
	}

	if scopesUnmarshal, ok := proxy["scopes"]; ok {
		var scopesVal map[string]string
		if err := scopesUnmarshal.unmarshal(&scopesVal); err != nil {
			return err
		}
		v.scopes = scopesVal
		delete(proxy, `scopes`)
	}
	extension := map[string]interface{}{}
	for key, val := range proxy {
		if !strings.HasPrefix(key, "x-") {
			continue
		}
		var extensionv interface{}
		if err := val.unmarshal(&extensionv); err != nil {
			return err
		}
		extension[key] = extensionv
		delete(proxy, key)
	}
	if len(extension) != 0 {
		v.extension = extension
	}
	if len(proxy) != 0 {
		for k := range proxy {
			return ErrUnknownKey(k)
		}
	}
	return nil
}

func (v *SecurityRequirement) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var proxy map[string]rawMessage
	if err := unmarshal(&proxy); err != nil {
		return err
	}
	securityRequirement := map[string][]string{}
	for key, val := range proxy {
		var securityRequirementv []string
		if err := val.unmarshal(&securityRequirementv); err != nil {
			return err
		}
		securityRequirement[key] = securityRequirementv
		delete(proxy, key)
	}
	if len(securityRequirement) != 0 {
		v.securityRequirement = securityRequirement
	}
	return nil
}
