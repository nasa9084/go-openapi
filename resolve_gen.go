// Code generated by mkresolver.go. DO NOT EDIT.

package openapi

import (
	"fmt"
)

func (v *Parameter) resolve() (*Parameter, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*Parameter); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *RequestBody) resolve() (*RequestBody, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*RequestBody); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *Response) resolve() (*Response, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*Response); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *Callback) resolve() (*Callback, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*Callback); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *Example) resolve() (*Example, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*Example); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *Link) resolve() (*Link, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*Link); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *Header) resolve() (*Header, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*Header); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *Schema) resolve() (*Schema, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*Schema); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}

func (v *SecurityScheme) resolve() (*SecurityScheme, error) {
	if v.reference == "" {
		return v, nil
	}
	resolvedInterface, err := resolve(v.root, v.reference)
	if err != nil {
		return nil, err
	}
	if resolved, ok := resolvedInterface.(*SecurityScheme); ok {
		return resolved, nil
	}
	panic(fmt.Sprintf("type assertion error in resolving %s", v.reference))
}
