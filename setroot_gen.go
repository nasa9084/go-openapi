// Code generated by mksetroot.go. DO NOT EDIT.

package openapi

func (v *OpenAPI) setRoot(root *OpenAPI) {
	if v.info != nil {
		v.info.setRoot(root)
	}
	for i := range v.servers {
		v.servers[i].setRoot(root)
	}
	if v.paths != nil {
		v.paths.setRoot(root)
	}
	if v.components != nil {
		v.components.setRoot(root)
	}
	for i := range v.security {
		v.security[i].setRoot(root)
	}
	for i := range v.tags {
		v.tags[i].setRoot(root)
	}
	if v.externalDocs != nil {
		v.externalDocs.setRoot(root)
	}
}

func (v *Info) setRoot(root *OpenAPI) {
	v.root = root
	if v.contact != nil {
		v.contact.setRoot(root)
	}
	if v.license != nil {
		v.license.setRoot(root)
	}
}

func (v *Contact) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *License) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *Server) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.variables {
		v.variables[k].setRoot(root)
	}
}

func (v *ServerVariable) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *Components) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.schemas {
		v.schemas[k].setRoot(root)
	}
	for k := range v.responses {
		v.responses[k].setRoot(root)
	}
	for k := range v.parameters {
		v.parameters[k].setRoot(root)
	}
	for k := range v.examples {
		v.examples[k].setRoot(root)
	}
	for k := range v.requestBodies {
		v.requestBodies[k].setRoot(root)
	}
	for k := range v.headers {
		v.headers[k].setRoot(root)
	}
	for k := range v.securitySchemes {
		v.securitySchemes[k].setRoot(root)
	}
	for k := range v.links {
		v.links[k].setRoot(root)
	}
	for k := range v.callbacks {
		v.callbacks[k].setRoot(root)
	}
}

func (v *Paths) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.paths {
		v.paths[k].setRoot(root)
	}
}

func (v *PathItem) setRoot(root *OpenAPI) {
	v.root = root
	if v.get != nil {
		v.get.setRoot(root)
	}
	if v.put != nil {
		v.put.setRoot(root)
	}
	if v.post != nil {
		v.post.setRoot(root)
	}
	if v.delete != nil {
		v.delete.setRoot(root)
	}
	if v.options != nil {
		v.options.setRoot(root)
	}
	if v.head != nil {
		v.head.setRoot(root)
	}
	if v.patch != nil {
		v.patch.setRoot(root)
	}
	if v.trace != nil {
		v.trace.setRoot(root)
	}
	for i := range v.servers {
		v.servers[i].setRoot(root)
	}
	for i := range v.parameters {
		v.parameters[i].setRoot(root)
	}
}

func (v *Operation) setRoot(root *OpenAPI) {
	v.root = root
	if v.externalDocs != nil {
		v.externalDocs.setRoot(root)
	}
	for i := range v.parameters {
		v.parameters[i].setRoot(root)
	}
	if v.requestBody != nil {
		v.requestBody.setRoot(root)
	}
	if v.responses != nil {
		v.responses.setRoot(root)
	}
	for k := range v.callbacks {
		v.callbacks[k].setRoot(root)
	}
	for i := range v.security {
		v.security[i].setRoot(root)
	}
	for i := range v.servers {
		v.servers[i].setRoot(root)
	}
}

func (v *ExternalDocumentation) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *Parameter) setRoot(root *OpenAPI) {
	v.root = root
	if v.schema != nil {
		v.schema.setRoot(root)
	}
	for k := range v.examples {
		v.examples[k].setRoot(root)
	}
	for k := range v.content {
		v.content[k].setRoot(root)
	}
}

func (v *RequestBody) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.content {
		v.content[k].setRoot(root)
	}
}

func (v *MediaType) setRoot(root *OpenAPI) {
	v.root = root
	if v.schema != nil {
		v.schema.setRoot(root)
	}
	for k := range v.examples {
		v.examples[k].setRoot(root)
	}
	for k := range v.encoding {
		v.encoding[k].setRoot(root)
	}
}

func (v *Encoding) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.headers {
		v.headers[k].setRoot(root)
	}
}

func (v *Responses) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.responses {
		v.responses[k].setRoot(root)
	}
}

func (v *Response) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.headers {
		v.headers[k].setRoot(root)
	}
	for k := range v.content {
		v.content[k].setRoot(root)
	}
	for k := range v.links {
		v.links[k].setRoot(root)
	}
}

func (v *Callback) setRoot(root *OpenAPI) {
	v.root = root
	for k := range v.callback {
		v.callback[k].setRoot(root)
	}
}

func (v *Example) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *Link) setRoot(root *OpenAPI) {
	v.root = root
	if v.server != nil {
		v.server.setRoot(root)
	}
}

func (v *Header) setRoot(root *OpenAPI) {
	v.root = root
	if v.schema != nil {
		v.schema.setRoot(root)
	}
	for k := range v.examples {
		v.examples[k].setRoot(root)
	}
	for k := range v.content {
		v.content[k].setRoot(root)
	}
}

func (v *Tag) setRoot(root *OpenAPI) {
	v.root = root
	if v.externalDocs != nil {
		v.externalDocs.setRoot(root)
	}
}

func (v *Schema) setRoot(root *OpenAPI) {
	v.root = root
	for i := range v.allOf {
		v.allOf[i].setRoot(root)
	}
	for i := range v.oneOf {
		v.oneOf[i].setRoot(root)
	}
	for i := range v.anyOf {
		v.anyOf[i].setRoot(root)
	}
	if v.not != nil {
		v.not.setRoot(root)
	}
	if v.items != nil {
		v.items.setRoot(root)
	}
	for k := range v.properties {
		v.properties[k].setRoot(root)
	}
	if v.additionalProperties != nil {
		v.additionalProperties.setRoot(root)
	}
	if v.discriminator != nil {
		v.discriminator.setRoot(root)
	}
	if v.xml != nil {
		v.xml.setRoot(root)
	}
	if v.externalDocs != nil {
		v.externalDocs.setRoot(root)
	}
}

func (v *Discriminator) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *XML) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *SecurityScheme) setRoot(root *OpenAPI) {
	v.root = root
	if v.flows != nil {
		v.flows.setRoot(root)
	}
}

func (v *OAuthFlows) setRoot(root *OpenAPI) {
	v.root = root
	if v.implicit != nil {
		v.implicit.setRoot(root)
	}
	if v.password != nil {
		v.password.setRoot(root)
	}
	if v.clientCredentials != nil {
		v.clientCredentials.setRoot(root)
	}
	if v.authorizationCode != nil {
		v.authorizationCode.setRoot(root)
	}
}

func (v *OAuthFlow) setRoot(root *OpenAPI) {
	v.root = root
}

func (v *SecurityRequirement) setRoot(root *OpenAPI) {
	v.root = root
}
